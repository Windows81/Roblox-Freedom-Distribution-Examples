<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<External>null</External>
	<External>nil</External>
	<Item class="ModuleScript" referent="RBX9D596B0344914900990A261BDBAB2381">
		<Properties>
			<Content name="LinkedSource"><null></null></Content>
			<string name="Name">MainModule</string>
			<ProtectedString name="Source"><![CDATA[local API = {}

local id = nil
local remoteEvent = script.ReportGoogleAnalyticsEvent
local helper = script.GoogleAnalyticsHelper
local category = "PlaceId-" .. tostring(game.PlaceId)
local googleUserTrackingId = game:GetService("HttpService"):GenerateGUID()
local lastTimeGeneratedGoogleUserId = os.time()

function convertNewlinesToVertLine(stack)
	local rebuiltStack = ""
	local first = true
	for line in stack:gmatch("[^\r\n]+") do
		if first then
			rebuiltStack = line
			first = false
		else
			rebuiltStack = rebuiltStack .. " | " .. line
		end
	end
	return rebuiltStack
end

function removePlayerNameFromStack(stack)
	stack = string.gsub(stack, "Players%.[^.]+%.", "Players.<Player>.")
	return stack
end

function setupScriptErrorTracking()
	game:GetService("ScriptContext").Error:connect(function (message, stack)
		API.ReportEvent(category,
			removePlayerNameFromStack(message) .. " | " .. 
			removePlayerNameFromStack(stack), "none", 1)
	end)
	-- add tracking for clients
	helper.Parent = game.StarterGui
	-- add to any players that are already in game
	for i, c in ipairs(game.Players:GetChildren()) do
		helper:Clone().Parent = (c:WaitForChild("PlayerGui"))
	end
end

function stringifyEvent(category, action, label, value)
	return "GA EVENT: " ..
		"Category: [" .. tostring(category) .. "] " .. 
		"Action: [" .. tostring(action) .. "] " ..
		"Label: [" .. tostring(label) .. "] " ..
		"Value: [" .. tostring(value) .. "]"
end

function printEventInsteadOfActuallySendingIt(category, action, label, value)
	print(stringifyEvent(category, action, label, value))
end

function API.ReportEvent(category, action, label, value)
	local numberValue = tonumber(value)
	if numberValue == nil or numberValue ~= math.floor(numberValue) then
		print("WARNING: not reporting event because value is not an integer. ", stringifyEvent(category, action, label, value))
		return
	end
	value = numberValue
	if game:FindFirstChild("NetworkServer") ~= nil then
		if id == nil then
			print("WARNING: not reporting event because Init() has not been called")
			return
		end		
		
		-- Try to detect studio start server + player
		if game.CreatorId <= 0 then
			printEventInsteadOfActuallySendingIt(category, action, label, value)
			return
		end
		
		if os.time() - lastTimeGeneratedGoogleUserId > 7200 then
			googleUserTrackingId = game:GetService("HttpService"):GenerateGUID()
			lastTimeGeneratedGoogleUserId = os.time()
		end

		local hs = game:GetService("HttpService")
		hs:PostAsync(
			"http://www.google-analytics.com/collect",
			"v=1&t=event&sc=start" ..
			"&tid=" .. id .. 
			"&cid=" .. googleUserTrackingId ..
			"&ec=" .. hs:UrlEncode(category) ..
			"&ea=" .. hs:UrlEncode(action) .. 
			"&el=" .. hs:UrlEncode(label) ..
			"&ev=" .. hs:UrlEncode(value),
			Enum.HttpContentType.ApplicationUrlEncoded)
	elseif game:FindFirstChild("NetworkClient") ~= nil then
		local evt = game:GetService("ReplicatedStorage"):WaitForChild("ReportGoogleAnalyticsEvent")
		evt:FireServer(category, action, label, value)
	else
		printEventInsteadOfActuallySendingIt(category, action, label, value)
	end
end

function API.Init(userId, config)
	if game:FindFirstChild("NetworkServer") == nil then
		error("Init() can only be called from game server")
	end
	if id == nil then
		if userId == nil then
			error("Cannot Init with nil Analytics ID")
		end

		id = userId
		remoteEvent.Parent = game:GetService("ReplicatedStorage")
		remoteEvent.OnServerEvent:connect(
			function (client, ...) API.ReportEvent(...) end)
		
		if config == nil or not config["DoNotReportScriptErrors"] then
			setupScriptErrorTracking()
		end

		if config == nil or not config["DoNotTrackServerStart"] then
			API.ReportEvent(category, "ServerStartup", "none", 0)
		end
		
		if config == nil or not config["DoNotTrackVisits"] then
			game.Players.ChildAdded:connect(function ()
				API.ReportEvent(category, "Visit", "none", 1)
			end)
		end
	else
		error("Attempting to re-initalize Analytics Module")
	end
end

return API
]]></ProtectedString>
		</Properties>
		<Item class="LocalScript" referent="RBX1CF3A1A4FF5F48BFB5C31BC32C335B11">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">GoogleAnalyticsHelper</string>
				<ProtectedString name="Source"><![CDATA[local evt = game:GetService("ReplicatedStorage"):WaitForChild("ReportGoogleAnalyticsEvent")
local category = "PlaceId-" .. tostring(game.PlaceId)

function convertNewlinesToVertLine(stack)
	local rebuiltStack = ""
	local first = true
	for line in stack:gmatch("[^\r\n]+") do
		if first then
			rebuiltStack = line
			first = false
		else
			rebuiltStack = rebuiltStack .. " | " .. line
		end
	end
	return rebuiltStack
end

function removePlayerNameFromStack(stack)
	stack = string.gsub(stack, "Players%.[^.]+%.", "Players.<Player>.")
	return stack
end

game:GetService("ScriptContext").Error:connect(function (message, stack)
	evt:FireServer(category,
		removePlayerNameFromStack(message) .. " | " ..
		removePlayerNameFromStack(stack), "none", 1)
end)
]]></ProtectedString>
			</Properties>
		</Item>
		<Item class="RemoteEvent" referent="RBXC4CCA67E9CD146AB81260A1145024E5F">
			<Properties>
				<string name="Name">ReportGoogleAnalyticsEvent</string>
			</Properties>
		</Item>
	</Item>
</roblox>